# provide the name/title of the workflow
name: CI/CD Pipeline with GitHub Actions

# specify the pipeline triggers
on: # [push, pull_request]
  # optional branch specification
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build:
    # development, testing or production environments
    environment:
      name: Testing
    # setting environment variables using GitHub Secrets
    env:
      FASTAPI_POSTGRESQL_DB_USERNAME: ${{secrets.FASTAPI_POSTGRESQL_DB_USERNAME}}
      FASTAPI_POSTGRESQL_DB_PASSWORD: ${{secrets.FASTAPI_POSTGRESQL_DB_PASSWORD}}
      FASTAPI_POSTGRESQL_DB_HOSTNAME: ${{secrets.FASTAPI_POSTGRESQL_DB_HOSTNAME}}
      FASTAPI_POSTGRESQL_DB_PORT: ${{secrets.FASTAPI_POSTGRESQL_DB_PORT}}
      FASTAPI_POSTGRESQL_DB_NAME: ${{secrets.FASTAPI_POSTGRESQL_DB_NAME}}
      FASTAPI_JWT_SECRET_KEY: ${{secrets.FASTAPI_JWT_SECRET_KEY}}
      FASTAPI_JWT_ALGORITHM: ${{secrets.FASTAPI_JWT_ALGORITHM}}
      FASTAPI_JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.FASTAPI_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}}
    # setting up additional services e.g. a testing database
    services:
      postgres:
        image: postgres # official image from dockerhub
        # more environment variables
        env:
          POSTGRES_PASSWORD: ${{secrets.FASTAPI_POSTGRESQL_DB_PASSWORD}}
          POSTGRES_DB: ${{secrets.FASTAPI_POSTGRESQL_DB_NAME}}
        ports:
          - 5432:5432
        # health checks
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        os: [ubuntu-latest]
        # version: ['3.10']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Pull github repository
        uses: actions/checkout@v3
      - name: Install python versions 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Upgrade python-pip version
        run: python -m pip install --upgrade pip
      - name: Install all application dependencies
        run: pip install -r requirements.txt
      - name: Run tests with pytest
        run: |
          pip install pytest-cov
          pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-3.10
          path: junit/test-results-3.10.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      # code below from Docker docs, intro to GitHub Actions
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-trialapi:latestv2
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-trialapi:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-trialapi:buildcache,mode=max
